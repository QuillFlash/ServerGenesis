#! /bin/bash

# ServerGenesis - Spin up containerised company servers in under 5 minutes!
# 0.7 Beta -- EXPECT BUGS AND ISSUES!!!

# This is the regexp cheatsheet I used to group multiple if-else validations
# together using regular expressions: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Cheatsheet

# Thank God, HashMaps exist in Bash! Source: https://xeiaso.net/notes/2024/bash-hashmap/
declare -A -r webserver_file_paths=(
    ["a"]="/var/www/html"
    ["A"]="/var/www/html"
    ["apache"]="/var/www/html"
    ["Apache"]="/var/www/html"
    ["n"]="/usr/share/nginx/html"
    ["N"]="/usr/share/nginx/html"
    ["nginx"]="/usr/share/nginx/html"
    ["Nginx"]="/usr/share/nginx/html"
    ["o"]="/usr/local/openresty/nginx/html"
    ["O"]="/usr/local/openresty/nginx/html"
    ["openresty"]="/usr/local/openresty/nginx/html"
    ["OpenResty"]="/usr/local/openresty/nginx/html"
)

initcheck=$(ps -p 1 | awk '{print $4}' | tail -1)
# DeepSeek R1 recommended me to give default values to crucial variables like these
is_ssh_access=false
ssh_port_number=""
is_file_server=false
sftp_username=""
is_web_server=false
web_server_port_number=""
web_server_type=""
website_files=""
is_db_server=false
db_type=""
mongodb_port_number=""
db_backup_file=""
mysql_creds=""
oradb_rpm_path=""
username=""
dbname=""
is_email_server=false
email_server_io_check=""

# If the docker package is not present, install it on the popular distros
# (Debian/Ubuntu, Fedora, RHEL, Arch Linux, Gentoo, Alpine)
if [ ! -e /usr/bin/docker ] && [ ! -d /Applications ]
then
    echo "Docker is not installed! Installing dependency of shell script..."
    sleep 2
    if [ -e /etc/debian_version ]
    then
        sudo apt-get -y install docker.io
    elif [ -e /etc/fedora-release ]
    then
        sudo dnf -y install dnf-plugins-core
        sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
        sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    elif [ -e /etc/redhat-release ]
    then
        sudo dnf -y install dnf-plugins-core
        sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
        sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    elif [ -d /etc/pacman.d ]
    then
        sudo pacman -Syu --noconfirm docker docker-buildx
        sudo systemctl enable --now docker.service
    elif [ -d /etc/portage ]
    then
        sudo emerge -qv docker docker-buildx
        # Gentoo uses two init systems, accommodating for the systemd users
        case $initcheck in
            *openrc*)
                sudo rc-update add docker default
                sudo rc-service docker start
                ;;
            systemd)
                sudo systemctl enable --now docker.service
                ;;
            *)
                echo "Unsupported Gentoo configuration!"
                exit 1
                ;;
        esac
    elif [ -d /etc/apk ]
    then
        sudo apk add docker
        sudo rc-update add docker default
        sudo service docker start
    else
        echo "Unfortunately, this script doesn't support your distribution."
        exit 1 # ChatGPT segítsége
    fi
fi

# Mac install
mac_install()
{
    echo "You are running macOS!"
    echo "Homebrew is not installed, installing Mac-specific dependency..."
    sleep 2
    xcode-select --install
    NONINTERACTIVE=1 sudo /bin/bash -c \
    "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    echo "Installing Docker for Mac..."
    brew install --cask docker
    open -a /Applications/Docker.app
    sleep 90
    # Help by Gemini 2.5 Pro to check for the running dockerd daemon
    local docker_daemon_check
    docker_daemon_check=$(docker ps > /dev/null 2>&1)
    if [[ ! $docker_daemon_check ]]
    then
        echo "FATAL ERROR: You did not activate dockerd in the Docker Desktop settings!
        Docker requires dockerd to function. The script is now going to exit."
        exit 1
    fi
}

if [ -d /Applications ] && [[ ! -d /usr/local/Cellar/docker || ! -d /opt/homebrew/Cellar/docker ]]
then
    mac_install
fi

# Source: https://stackoverflow.com/questions/18431285/check-if-a-user-is-in-a-group-in-bash, ChatGPT
if [ "$(id -nG "$USER" | tr ' ' '\n' | grep -w 'docker')" != "docker" ] \
&& [ ! -d /Applications ]
then
    echo "$USER is not part of group 'docker', adding user to necessary group..."
    sudo usermod -aG docker "$USER"
fi

ssh_setup()
{
    docker exec dockerian apt-get -y install openssh-server
    docker exec dockerian sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
    docker exec dockerian sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
    # Debian in a container doesn't use systemd, so it manages processes
    # the exact same way as Devuan: with the classic sysvinit init system.
    docker exec dockerian update-rc.d ssh defaults
    docker exec dockerian service ssh start
}

# Arch Wiki: https://wiki.archlinux.org/title/SCP_and_SFTP
file_server_setup()
{
    local username=$1
    echo "Please type in your future root password!"
    docker exec -it dockerian passwd
    docker exec dockerian groupadd sftpuser
    docker exec dockerian useradd -mG sftpuser -s /sbin/nologin "$username"
    echo "Please type in the password of the first SFTP user!"
    docker exec -it dockerian passwd "$username"
    docker exec dockerian bash -c "echo -e 'Match Group sftpuser
    ForceCommand internal-sftp
    ChrootDirectory ~
    PasswordAuthentication yes
    PermitTunnel no
    AllowAgentForwarding no
    AllowTcpForwarding no
    X11Forwarding no' >> /etc/ssh/sshd_config"
    docker exec dockerian chmod 755 /home/"$username"
    docker exec dockerian chown root:root /home/"$username"
    docker exec dockerian mkdir -p /home/"$username"/sftp
    docker exec dockerian chmod 744 /home/"$username"/sftp
    docker exec dockerian chown "$username":sftpuser /home/"$username"/sftp
    docker exec dockerian service ssh restart
}

web_server_setup()
{
    local server_type=$1
    # Thanks to Bruce K., now I can check if the script is installed
    # as a system file or not (for future packaging in the big distros)
    # https://stackoverflow.com/a/23960775
    local cmd
    cmd=$(command -v ServerGenesis)
    case $server_type in
        a|A|apache|Apache)
            docker exec dockerian apt-get -y install apache2 php
            docker exec dockerian update-rc.d apache2 defaults
            docker exec dockerian service apache2 start
            ;;
        n|N|nginx|Nginx)
            docker exec dockerian apt-get -y install php php-fpm
            # The default.conf file needs to be in the nginx-conf
            # directory in order for nginx and OpenResty to make use of PHP files!!!
            # (Thank you, Gemini 2.5 Pro for the operational config file!)
            if [[ -e $cmd ]]
            then
                docker cp "$cmd"/nginx-conf/default.conf nginx:/etc/nginx/conf.d
            else
                docker cp nginx-conf/default.conf nginx:/etc/nginx/conf.d
            fi
            docker exec dockerian sed -i \
            's/listen = \/run\/php\/php8.2-fpm.sock/listen = 127.0.0.1:9000/' \
            /etc/php/8.2/fpm/pool.d/www.conf
            docker exec dockerian sed -i \
            's/;pm.status_listen = 127.0.0.1:9001/pm.status_listen = 127.0.0.1:9001/' \
            /etc/php/8.2/fpm/pool.d/www.conf
            docker exec dockerian update-rc.d nginx defaults
            docker exec dockerian update-rc.d php8.2-fpm defaults
            docker exec dockerian service php8.2-fpm start
            docker exec dockerian service nginx start
            ;;
        o|O|openresty|OpenResty)
            docker exec dockerian bash -c "apt-get update && apt-get -y install php php-fpm"
            if [[ -e $cmd ]]
            then
                docker cp "$cmd"/nginx-conf/default.conf nginx:/etc/nginx/conf.d
            else
                docker cp nginx-conf/default.conf nginx:/etc/nginx/conf.d
            fi
            docker exec dockerian sed -i \
            's/listen = \/run\/php\/php8.2-fpm.sock/listen = 127.0.0.1:9000/' \
            /etc/php/8.2/fpm/pool.d/www.conf
            docker exec dockerian sed -i \
            's/;pm.status_listen = 127.0.0.1:9001/pm.status_listen = 127.0.0.1:9001/' \
            /etc/php/8.2/fpm/pool.d/www.conf
            docker exec dockerian update-rc.d openresty defaults
            docker exec dockerian update-rc.d php8.2-fpm defaults
            docker exec dockerian service php8.2-fpm start
            docker exec dockerian service openresty start
            ;;
        "")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac
}

database_setup()
{
    local db_type=$1
    case $db_type in
        mo|Mo|MO|mongodb|MongoDB)
            docker run -d --restart always -p "$mongodb_port_number":27017 --name mongodb mongo:latest
            docker exec dockerian apt-get -y install php-mongodb composer
            ;;
        my|My|MY|mysql|MySQL)
            docker exec -it dockerian curl -LsS https://r.mariadb.com/downloads/mariadb_repo_setup | bash
            docker exec dockerian bash -c "apt-get update && apt-get -y install \
            mariadb-server mariadb-client mariadb-backup php-mysql"
            docker exec dockerian update-rc.d mariadb defaults
            docker exec dockerian service mariadb start
            ;;
        o|O|oracle|Oracle)
            docker exec dockerian apt-get -y install wget alien libaio1 unixodbc
            docker cp "$oradb_rpm_path" dockerian:/
            docker exec dockerian alien -cdi oracle-database-ee-*.rpm
            docker exec dockerian apt-get -y install /oracle-database-ee-*.deb
            ;;
        p|P|postgres|Postgres|postgresql|PostgreSQL)
            docker exec dockerian apt-get -y install postgresql php php-pgsql
            docker exec dockerian update-rc.d postgresql defaults
            docker exec dockerian service postgresql start
            ;;
        "")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac
}

email_server_setup()
{
    if [[ $is_email_server || $email_server_io_check =~ [yY] ]]
    then
        docker exec dockerian apt-get -y install postfix
        docker exec dockerian postconf -e smtpd_tls_security_level=may
        docker exec dockerian postconf -e smtpd_use_tls
        docker exec dockerian postconf -e smtpd_enforce_tls
    fi
}

main_container_builder()
{
    local ssh_port=$1
    local web_port=$2
    if [[ ! $web_server_type =~ /n|N|nginx|Nginx/ ]]
    then
        if [[ -z $ssh_port && -z $web_port ]]
        then
            docker run -d --restart always --name dockerian -it nginx /bin/bash
        elif [ -z "$ssh_port" ]
        then
            # Inspired by a ChatGPT response
            docker run -d --restart always --name dockerian -p "$web_port":80 -it nginx /bin/bash
        elif [ -z "$web_port" ]
        then
            docker run -d --restart always --name dockerian -p "$ssh_port":22 -it nginx /bin/bash
        else
            docker run -d --restart always --name dockerian -p "$ssh_port":22 -p "$web_port":80 -it nginx /bin/bash
        fi
    elif [[ ! $web_server_type =~ /o|O|openresty|OpenResty/ ]]
    then
        if [[ -z $ssh_port && -z $web_port ]]
        then
            docker run -d --restart always --name dockerian -it openresty/openresty /bin/bash
        elif [ -z "$ssh_port" ]
        then
            # Inspired by a ChatGPT response
            docker run -d --restart always --name dockerian -p "$web_port":80 -it openresty/openresty /bin/bash
        elif [ -z "$web_port" ]
        then
            docker run -d --restart always --name dockerian -p "$ssh_port":22 -it openresty/openresty /bin/bash
        else
            docker run -d --restart always --name dockerian -p "$ssh_port":22 -p "$web_port":80 -it openresty/openresty /bin/bash
        fi
    else
        docker build -t dockerian .
        if [[ -z $ssh_port && -z $web_port ]]
        then
            docker run -d --restart always --name dockerian -it dockerian /bin/bash
        elif [ -z "$ssh_port" ]
        then
            # Inspired by a ChatGPT response
            docker run -d --restart always --name dockerian -p "$web_port":80 -it dockerian /bin/bash
        elif [ -z "$web_port" ]
        then
            docker run -d --restart always --name dockerian -p "$ssh_port":22 -it dockerian /bin/bash
        else
            docker run -d --restart always --name dockerian -p "$ssh_port":22 -p "$web_port":80 -it dockerian /bin/bash
        fi
    fi
}

create_main_container()
{
    main_container_builder "$ssh_port_number" "$web_server_port_number"
}

value_validation()
{
    if [[ -z "$2" || "$2" == -* ]]
    then
        echo "ERROR: Inputting a value is required after $1!" >&2
        exit 1
    fi

    if [[ $db_type =~ /o|O|oracle|Oracle/ && -z $3 || $3 == -* && -z $4 || $4 == -* ]]
    then
        echo -e "ERROR: You need to specify the username and the name of the database
while restoring an Oracle database!"
    fi
}

load_database_backup()
{
    local database_type="$1"
    local backup_path="$2"
    local user="$3"
    local database_name="$4"
    local container_backup_path
    container_backup_path="$(basename "$backup_path")"
    case "$database_type" in
        mo|Mo|MO|mongodb|MongoDB)
            # Help to understand the sed syntax by Gemini 2.5 Pro
            if [[ $web_server_type =~ /a|A|apache|Apache/ ]]
            then
                docker exec dockerian sed -i '1,/\[PHP\]/ { /\[PHP\]/ a\
extension=mongodb
}' /etc/php/8.2/apache2/php.ini
                docker exec dockerian service apache2 restart
            else
                docker exec dockerian sed -i '1,/\[PHP\]/ { /\[PHP\]/ a\
extension=mongodb
}' /etc/php/8.2/fpm/php.ini
                docker exec dockerian service php8.2-fpm restart
            fi
            docker exec dockerian bash -c "cd ${webserver_file_paths[$web_server_type]} || exit 1 \
            && composer require mongodb/mongodb"
            # Help by ChatGPT because I did not even realise the basename command exists, and it's genuinely useful!
            docker exec mongodb mongorestore -d "$container_backup_path" "$container_backup_path"
            ;;
        my|My|MY|mysql|MySQL)
            if [[ $web_server_type =~ /a|A|apache|Apache/ ]]
            then
                docker exec dockerian sed -i 's/;extension=mysqli/extension=mysqli/' /etc/php/8.2/apache2/php.ini
                docker exec dockerian sed -i 's/;extension=pdo_mysql/extension=pdo_mysql/' /etc/php/8.2/apache2/php.ini
                docker exec dockerian service apache2 restart
            else
                docker exec dockerian sed -i 's/;extension=mysqli/extension=mysqli/' /etc/php/8.2/fpm/php.ini
                docker exec dockerian sed -i 's/;extension=pdo_mysql/extension=pdo_mysql/' /etc/php/8.2/fpm/php.ini
                docker exec dockerian service php8.2-fpm restart
            fi
            if [[ -n "$mysql_creds" ]]
            then
                docker cp "$mysql_creds" dockerian:/root/.my.cnf
                docker exec dockerian chmod 600 /root/.my.cnf
            fi
            # Help by ChatGPT
            docker exec dockerian bash -c "mysql -u root -p < $backup_path"
            ;;
        o|O|oracle|Oracle)
            if [[ $web_server_type =~ /a|A|apache|Apache/ ]]
            then
                docker exec dockerian sed -i 's/;extension=odbc/extension=odbc/' /etc/php/8.2/apache2/php.ini
                docker exec dockerian sed -i 's/;extension=pdo_odbc/extension=pdo_odbc/' /etc/php/8.2/apache2/php.ini
                docker exec dockerian service apache2 restart
            else
                docker exec dockerian sed -i 's/;extension=odbc/extension=odbc/' /etc/php/8.2/fpm/php.ini
                docker exec dockerian sed -i 's/;extension=pdo_odbc/extension=pdo_odbc/' /etc/php/8.2/fpm/php.ini
                docker exec dockerian service php8.2-fpm restart
            fi
            docker exec dockerian service odbc restart
            # Help by Oracle Docs:
            # https://docs.oracle.com/en/database/oracle/oracle-database/19/sutil/datapump-import-utility.html#GUID-1DB459BF-1FA2-4CA2-BB9D-2FE59C0B99F6
            docker exec dockerian impdp "$user"@"$database_name" DIRECTORY="$backup_path" DUMPFILE=export.dmp FULL=YES NOLOGFILE=YES
            ;;
        p|P|postgres|postgresql|Postgres|PostgreSQL)
            if [[ $web_server_type =~ /a|A|apache|Apache/ ]]
            then
                docker exec dockerian sed -i 's/;extension=pgsql/extension=pgsql/' /etc/php/8.2/apache2/php.ini
                docker exec dockerian sed -i 's/;extension=pdo_pgsql/extension=pdo_pgsql/' /etc/php/8.2/apache2/php.ini
                docker exec dockerian service apache2 restart
            else
                docker exec dockerian sed -i 's/;extension=pgsql/extension=pgsql/' /etc/php/8.2/fpm/php.ini
                docker exec dockerian sed -i 's/;extension=pdo_pgsql/extension=pdo_pgsql/' /etc/php/8.2/fpm/php.ini
                docker exec dockerian service php8.2-fpm restart
            fi
            # Help by CyberStems on StackOverflow:
            # https://stackoverflow.com/questions/58773246/as-a-root-user-can-i-execute-commands-in-bash-as-another-user-without-requiring
            # And thanks to Yigit Ozdemir, the user in the data dump actually has the rights to display the DB content!
            # https://openbasesystems.com/2023/06/20/postgresql-error-fatal-role-username-does-not-exist/
            docker exec dockerian su postgres -c 'psql -c "CREATE ROLE root WITH SUPERUSER LOGIN;"'
            docker exec dockerian su postgres -c "psql -c 'CREATE DATABASE $database_name;'"
            docker exec dockerian su postgres -c "psql $database_name < $container_backup_path" # Help by DeepSeek
            docker exec dockerian su postgres -c "psql -c 'GRANT root TO $user;'"
            ;;
        *)
            echo "ERROR: Invalid argument."
            exit 1
            ;;
    esac
}

tui()
{
    # Source code for choosing functionality of the Debian container interactively
    echo "SERVER GENESIS -- Fire up a platform-agnostic server in minutes!"
    echo "0.8 Beta 2 -- EXPECT BUGS AND ISSUES!!!"
    sleep 2
    echo
    echo "Choose the functionality of your containerised Debian server:"
    echo
    echo "1.) Would you like to grant SSH access to the server? (Y/N) ";\
    local ssh
    read -r ssh # https://ryanstutorials.net/bash-scripting-tutorial/bash-input.php
    echo
    case $ssh in
        y|Y)
            echo "Which port would you like SSH to listen on?"
            read -r ssh_port_number
            # jilles at StackOverflow.com: https://stackoverflow.com/a/3951175
            case "$ssh_port_number" in
                ''|*[!0-9]*)
                    echo "ERROR: A port number can only contain numbers (obviously)."
                    exit 1
                    ;;
                *) ;;
            esac
            echo "2.) Would you like to install a file server? (Y/N) ";\
            local file_server
            read -r file_server
            case $file_server in
            y|Y)
                echo
                echo "Please specify the name of the first SFTP account: "
                read -r sftp_username
                ;;
            n|N)
                ;;
            *)
                echo "ERROR: Invalid input."
                exit 1
                ;;
            esac
            ;;
        n|N|"")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac
    echo

    echo "3.) Would you like to install a web server? (Y/N) ";\
    local web_server
    read -r web_server

    case $web_server in
        y|Y)
            is_web_server=true
            echo
            echo "Choose your web server: [A]pache/[N]ginx/[O]penResty ";\
            read -r web_server_type
            case $web_server_type in
                a|A|apache|Apache|n|N|nginx|Nginx|o|O|openresty|OpenResty)
                    ;;
                *)
                    echo "ERROR: Invalid input."
                    exit 1
                    ;;
            esac
            echo
            echo "Which port would you like the web server to listen on?"
            read -r web_server_port_number
            case $web_server_port_number in
                ''|*[!0-9]*)
                    echo "ERROR: A port number can only contain numbers (obviously)."
                    exit 1
                    ;;
                *) ;;
            esac
            echo
            echo "Would you like to import an existing website? (Y/N) ";\
            local restore_website_state
            read -r restore_website_state
            case $restore_website_state in
                y|Y)
                    echo
                    echo "Please type in the path to your website's files:";\
                    read -r website_files
                    if [[ ! -e $website_files ]]
                    then
                        echo "ERROR: File not found! Exiting..."
                        exit 1
                    fi
                    ;;
                n|N|"")
                    ;;
                *)
                    echo "ERROR: Invalid input."
                    exit 1
                    ;;
            esac
            ;;
        n|N|"")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac
    echo

    if [[ "$web_server" =~ [yY] ]]
    then
        echo "4.) Would you like to install a database server? (Y/N) ";\
        local isDbServer
        read -r isDbServer
        case $isDbServer in
            y|Y)
                echo
                echo "Choose your database management system (DBMS): [Mo]ngoDB/[My]SQL/[O]racle SQL (PL/SQL)/[P]ostgreSQL ";\
                read -r db_type
                if [[ ! $db_type =~ /mo|Mo|MO|mongodb|MongoDB|my|My|MY|mysql|MySQL|o|O|oracle|Oracle|p|P|postgres|Postgres|postgresql|PostgreSQL/ ]]
                then
                    echo "ERROR: Invalid input."
                    exit 1
                fi
                if [[ $db_type =~ /mo|Mo|MO|mongodb|MongoDB/ ]]
                then
                    echo
                    echo "Enter the port number the MongoDB server is going to listen on: "
                    read -r mongodb_port_number
                fi
                echo
                echo "Would you like to import an existing database? (Y/N) ";\
                local doesUserHaveExistingDb
                read -r doesUserHaveExistingDb
                echo
                case $doesUserHaveExistingDb in
                    y|Y)
                        if [[ $db_type =~ /my|My|MY|mysql|MySQL/ ]]
                        then
                            echo "Do you use a MySQL credentials file instead of a big SQL dump? (Y/N)"
                            local doesUserHaveMySQLCreds
                            doesUserHaveMySQLCreds=$(read -r)
                            echo
                        fi
                        echo "Please type in the path to your database's files:";\
                        read -r db_backup_file
                        if [[ "$db_type" =~ /o|O|oracle|Oracle|p|P|postgres|postgresql|Postgres|PostgreSQL/ ]]
                        then
                            echo "Enter the path where you Oracle database installer RPM resides in: "
                            oradb_rpm_path=$(read -r)
                            echo
                            echo "Enter your username: "
                            username=$(read -r)
                        fi
                        if [[ $db_type =~ /my|My|MY|mysql|MySQL|o|O|oracle|Oracle/ ]]
                        then
                            echo
                            echo "Enter the name of the database:"
                            dbname=$(read -r)
                        fi
                        ;;
                    n|N|"")
                        ;;
                    *)
                        echo "ERROR: Invalid input."
                        exit 1
                        ;;
                esac
                ;;
            n|N|"")
                ;;
            *)
                echo "ERROR: Invalid input."
                exit 1
                ;;
        esac
    fi
    echo
    echo "5.) And finally: would you like to install an e-mail server? (Y/N) "
    local is_mail_server
    read -r is_mail_server
    case $is_mail_server in
        y|Y|n|N) ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac
    echo

    # Installing chosen dependencies
    echo "Installing chosen dependencies..."
    echo

    main_container_builder "$ssh_port_number" "$web_server_port_number"

    case $ssh in
        y|Y) ssh_setup ;;
        n|N) ;;
        *)
            echo "ERROR: Not a valid input."
            exit 1
            ;;
    esac

    case $file_server in
        y|Y)
            file_server_setup "$sftp_username"
            ;;
        n|N|"")
            ;;
        *)
            echo "ERROR: Not a valid input."
            exit 1
            ;;
    esac

    case $web_server in
        y|Y)
            web_server_setup "$web_server_type"
            if [[ -n "$website_files" ]]
            then
                docker cp "$website_files" dockerian:"${webserver_file_paths[$web_server_type]}"
                service_restart "$web_server_type"
            fi
            ;;
        n|N|"")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac

    case $isDbServer in
        y|Y)
            database_setup "$db_type"
            case $doesUserHaveExistingDb in
                y|Y)
                    if [[ ! $db_type =~ /mo|Mo|MO|mongodb|MongoDB/ ]]
                    then
                        docker cp "$db_backup_file" dockerian:/
                    else
                        docker cp "$db_backup_file" mongodb:/
                    fi
                    if [[ $db_type =~ /o|O|oracle|Oracle|p|P|postgres|Postgres|postgresql|PostgreSQL/ ]]
                    then
                        load_database_backup "$db_type" "$db_backup_file" "$username" "$dbname"
                    else
                        load_database_backup "$db_type" "$db_backup_file"
                    fi
                    ;;
                n|N|"")
                    ;;
                *)
                    echo "ERROR: Invalid input."
                    exit 1
                    ;;
            esac
            ;;
        n|N|"")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac

    case $is_mail_server in
        y|Y)
            email_server_setup
            ;;
        n|N|"")
            ;;
        *)
            echo "ERROR: Invalid input."
            exit 1
            ;;
    esac

    echo "Congratulations! You've successfully configured a ready-to-use (and portable) Debian server for your needs."
    echo "Isn't it nice that I spent a lot of my time so that you'd have less headaches? :)"
}

if [[ $# -eq 0 ]]
then
    tui
fi

print_help()
{
    cat <<EOF
SERVER GENESIS -- Spin up containerised company servers in under 5 minutes!

2024-2025 TheAestheticFur (With the help of some ChatGPT and DeepSeek assistance)


Usage: $0 [ARGS] OPTARGS ...
Example: $0 --ssh --ssh-port 2222 --webserver --webserver-port 80 --type apache --website-files /path/to/files

You can use this script without specifying arguments, too. In this case, an interactive TUI
wizard launches, allowing you to set your server up in a user-friendly environment.

Main arguments:
  -s, --ssh                     Enable SSH support
  -S, --ssh-port PORT           SSH port number (mandatory if -s/--ssh is used)

  -w, --webserver               Use your container as a web server
  -W, --webserver-port          Web server port number (mandatory if -w/--webserver is used)
  -t, --webserver-type          Type of your web server (apache, nginx, openresty)

  -d, --db-server               Use your container as a database server
  -D, --db-type                 Type of your database server (mongodb, mysql, postgresql, oracle)
  -o, --oradb-rpm-path          Path of where the official Oracle database RPM is stored (needed to install an Oracle
                                database)
                                database type is PostgreSQL and use the --db-backup argument alongside it)
  -u, --username                Specify the username of the Oracle SQL or PostgreSQL user that interacts
                                with the database in your web app (needed if you specified Oracle SQL or PostgreSQL)

  -e, --email-server            Use your container as an e-mail server

  -h, --help                    Display this exact help dialogue

Optional arguments:
  --website-files PATH          Copy existing website data into container (only if -w/--webserver is used)
  --db-name STRING              Specifies the name of the database created to restore data into
                                (only if -d/--db-server is used with MySQL, PostgreSQL or Oracle database types)
  --db-backup PATH              Copy database dump into the container and restore it
                                (only if -d/--db-server is used)
  -m, --mysql-credentials PATH  Copy a MySQL configuration file into the container (only if the database type
                                is MySQL)
  -M, --mongodb-port            Specify the port number of the MongoDB service (only if -d/--db-server is used
                                and the database type is specified as MongoDB)
  -f, --file-server USERNAME    Add SFTP file server support with an initial user (only if -s/--ssh is used)

This script is blessed with the approval of Xenia, the Super Vixen of Linux.
EOF
}

# Choosing the functionality of the Debian container using switches (API that the C# front-end relies upon)
# Inspired by: https://labex.io/tutorials/shell-bash-getopt-391993#parsing-options-with-bash-getopt
# Additional help by DeepSeek to make the argument handling more compatible with macOS
# (BSD getopt doesn't support handling both short and long switches at the same time, unlike GNU getopt)

while [[ $# -gt 0 ]]
do
    case "$1" in
        -s|--ssh)
            is_ssh_access=true
            shift
            ;;
        -w|--webserver)
            is_web_server=true
            shift
            ;;
        -d|--db-server)
            is_db_server=true
            shift
            ;;
        -f|--file-server)
            is_file_server=true
            value_validation "$1" "$2"
            sftp_username=$2
            shift 2
            ;;
        -e|--email-server)
            is_email_server=true
            shift
            ;;
        -S|--ssh-port)
            value_validation "$1" "$2"
            ssh_port_number="$2"
            # echo "Captured SSH Port: $ssh_port_number"
            shift 2
            ;;
        -W|--webserver-port)
            value_validation "$1" "$2"
            web_server_port_number="$2"
            # echo "Captured Web Server Port: $web_server_port_number"
            shift 2
            ;;
        -t|--webserver-type)
            value_validation "$1" "$2"
            web_server_type="$2"
            shift 2
            ;;
        -D|--db-type)
            value_validation "$1" "$2"
            db_type="$2"
            shift 2
            ;;
        -o|--oracle-db-rpm-path)
            value_validation "$1" "$2"
            oradb_rpm_path="$2"
            shift 2
            ;;
        --db-name)
            value_validation "$1" "$2"
            dbname="$2"
            shift 2
            ;;
        -M|--mongodb-port)
            value_validation "$1" "$2"
            mongodb_port_number="$2"
            shift 2
            ;;
        -m|--mysql-credentials)
            value_validation "$1" "$2"
            mysql_creds="$2"
            shift 2
            ;;
        -u|--username)
            value_validation "$1" "$2"
            username="$2"
            shift 2
            ;;
        --website-files)
            value_validation "$1" "$2"
            website_files="$2"
            shift 2
            ;;
        --db-backup)
            value_validation "$1" "$2"
            db_backup_file="$2"
            shift 2
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        -*)
            echo "ERROR: Invalid argument: $1" >&2
            exit 126
            ;;
        *)
            echo "ERROR: Command not found: $1" >&2
            exit 127
            ;;
    esac
done

if ! docker ps -a | grep -Eq 'dockerian'
then
    create_main_container
fi

service_restart()
{
    local service_name="$1"
    docker exec dockerian service "$service_name" restart
}

# This is mostly boilerplate, so I made the structure of it with DeepSeek
check_dependencies()
{
    if $is_file_server && ! $is_ssh_access
    then
        echo "ERROR: This command can only be used alongside -s/--ssh." >&2
        exit 1
    fi

    if $is_ssh_access && [[ -z "$ssh_port_number" ]]
    then
        echo "ERROR: The SSH port number is required." >&2
        exit 1
    fi

    if $is_web_server && [[ -z "$web_port" && -z "$web_server_type" ]]
    then
        echo "ERROR: The port number and type of the web server is required." >&2
        exit 1
    fi

    if [[ -n "$website_files" ]] && ! $is_web_server
    then
        echo "ERROR: This command can only be used alongside -w/--webserver." >&2
        exit 1
    fi

    if [[ -n "$db_backup_file" ]] && ! $is_db_server
    then
        echo "ERROR: This command can only be used alongside -d/--db-server." >&2
        exit 1
    fi

    if [[ -n "$mongodb_port_number" ]] && ! $is_db_server
    then
        echo "ERROR: This command can only be used alongside -d/--db-server." >&2
        exit 1
    fi

    if [[ $db_type =~ /o|O|oracle|Oracle/ ]] && ! $is_db_server
    then
        echo "ERROR: This command can only be used alongside -d/--db-server." >&2
        exit 1
    fi

    if [[ $db_type =~ /o|O|oracle|Oracle/ && -z $oradb_rpm_path ]]
    then
        echo "ERROR: For legal reasons, you can only install the Oracle database from a local RPM file.
        Please specify the correct path or download the RPM package from here:
        https://www.oracle.com/database/technologies/oracle-database-software-downloads.html"
        exit 1
    fi

    if [[ -n "$mongodb_port_number" && ! $db_type =~ /mo|Mo|MO|mongodb|MongoDB/ ]]
    then
        echo "ERROR: This command can only be used if your database type is set to MongoDB." >&2
        exit 1
    fi

    if [[ -z $dbname && -n $db_backup_file ]]
    then
        echo "ERROR: The username must be specified when restoring into either MySQL, PostgreSQL or Oracle SQL." >&2
        exit 1
    fi

    if [[ -z $username && -n $db_backup_file && $db_type =~ /p|P|postgres|Postgres|postgresql|PostgreSQL|o|O|oracle|Oracle/ ]]
    then
        echo "ERROR: This command must be used when the database type is either Oracle SQL or PostgreSQL and --db-backup is specified." >&2
        exit 1
    fi
}

main()
{
    check_dependencies

    if [[ $is_ssh_access == true ]]
    then
        ssh_setup
        if [[ $is_file_server == true ]]
        then
            file_server_setup "$sftp_username"
        fi
    fi

    if [[ $is_web_server == true ]]
    then
        web_server_setup "$web_server_type"
        if [[ -n "$website_files" ]]
        then
            docker cp "$website_files" dockerian:"${webserver_file_paths[$web_server_type]}"
            service_restart "$web_server_type"
        fi
    fi

    if [[ $is_db_server == true ]]
    then
        database_setup "$db_type"
        if [[ ! $db_type =~ /mo|Mo|MO|mongodb|MongoDB/ ]]
        then
            docker cp "$db_backup_file" dockerian:/
        else
            docker cp "$db_backup_file" mongodb:/
        fi
        if [[ $db_type =~ /o|O|oracle|Oracle|p|P|postgres|Postgres|postgresql|PostgreSQL/ ]]
        then
            load_database_backup "$db_type" "$db_backup_file" "$username" "$dbname"
        else
            load_database_backup "$db_type" "$db_backup_file"
        fi
    fi

    if [[ $is_email_server == true ]]
    then
        email_server_setup
    fi
}

main