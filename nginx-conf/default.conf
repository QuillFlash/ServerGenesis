server {
    listen       80;
    server_name  localhost; # change to your real domain, if you've bought one

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log error;

    root   /usr/share/nginx/html;
    index  index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~* \.(jpg|jpeg|gif|png|webp|svg|css|js|ico|xml|txt|webmanifest|ttf|woff|woff2|eot)$ {
        expires 30d;
        access_log off;
        add_header Cache-Control "public";
    }

    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    
    location ~ \.php$ {
    fastcgi_pass   127.0.0.1:9000;
    fastcgi_index  index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    
    location ~ /\.ht {
    deny  all;
    }

    location ~ /\. {
       deny all;
    }

    location ~ /\.env { deny all; }
    location ~ /\.git { deny all; }

}

# --- HTTPS settings (if needed) ---
# If you need HTTPS (Highly recommended in a production environment!):
# 1. Comment out or take out 'listen 80;'.
# 2. Add in 'listen 443 ssl http2;'.
# 3. Get an SSL certificate (eg. Let's Encrypt / Certbot).
# 4. Add these lines in to define the location of the certificate and the key
# (with the real file paths):
# ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
# ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#
# 5. (Optional, but recommended) SSL/TLS settings:
# include snippets/ssl-params.conf; # common under Debian/Ubuntu
# ssl_protocols TLSv1.2 TLSv1.3;
# ssl_prefer_server_ciphers off;
# ssl_ciphers "..."; # Use modern, secure cipher suites!
#
# 6. (Optional, but recommended) Redirect HTTP to HTTPS-re:
# Create another 'server' block for port 80, which redirects HTTP traffic to HTTPS:
# server {
#    listen 80;
#    listen [::]:80;
#    server_name example.com www.example.com;
#    return 301 https://$host$request_uri;
# }
